from tflite_runtime.interpreter import Interpreter
import numpy as np

interpreter = Interpreter(model_path="model.tflite")
interpreter.allocate_tensors()
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# Resize dimensions based on your model (usually 224x224)
def preprocess(frame):
    img = cv2.resize(frame, (224, 224))
    img = np.expand_dims(img, axis=0).astype(np.float32) / 255.0
    return img

labels = ["mosfet", "ic", "microcontroller", "sensor", "capacitor"]  # Example

while True:
    ret, frame = cap.read()
    if not ret:
        break

    input_data = preprocess(frame)
    interpreter.set_tensor(input_details[0]['index'], input_data)
    interpreter.invoke()
    output = interpreter.get_tensor(output_details[0]['index'])
    
    label_idx = int(np.argmax(output))
    label = labels[label_idx]

    # Show prediction on screen
    cv2.putText(frame, f"Detected: {label}", (10, 30),
                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    cv2.imshow("Component Classification", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
