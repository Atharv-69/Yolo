import cv2
import numpy as np
from tflite_runtime.interpreter import Interpreter

# Load the TFLite model
interpreter = Interpreter(model_path="model.tflite")
interpreter.allocate_tensors()

# Get model input/output details
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# Load class labels from file
with open("labels.txt", "r") as f:
    labels = [line.strip() for line in f.readlines()]

# Access phone camera stream via IP Webcam
cam_url = "http://192.168.1.101:8080/video"  # Update with your phone's IP
cap = cv2.VideoCapture(cam_url)

# Function to preprocess frame
def preprocess(frame):
    img = cv2.resize(frame, (224, 224))  # Adjust if your model uses other size
    img = np.expand_dims(img, axis=0).astype(np.float32) / 255.0
    return img

while True:
    ret, frame = cap.read()
    if not ret:
        print("Failed to grab frame.")
        break

    input_data = preprocess(frame)
    interpreter.set_tensor(input_details[0]['index'], input_data)
    interpreter.invoke()
    output = interpreter.get_tensor(output_details[0]['index'])

    # Get the prediction
    label_idx = int(np.argmax(output))
    label = labels[label_idx]
    confidence = output[0][label_idx]

    # Overlay label on the frame
    text = f"{label} ({confidence:.2f})"
    cv2.putText(frame, text, (10, 30),
                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    cv2.imshow("Real-Time Classification", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
